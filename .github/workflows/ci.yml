name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run black (formatting check)
      run: poetry run black --check .
    
    - name: Run isort (import sorting check)
      run: poetry run isort --check-only .
    
    - name: Run flake8 (linting)
      run: poetry run flake8 .
    
    - name: Run mypy (type checking)
      run: poetry run mypy src/image_definitions --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Run tests
      run: poetry run pytest -v --cov=image_definitions --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
    
    - name: Install dependencies
      run: poetry install --with dev
    
    - name: Run safety (security check)
      run: poetry run safety check || true  # Don't fail CI on security issues for now
    
    - name: Run bandit (security linting)
      run: poetry run bandit -r src/image_definitions/ || true

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: image-definitions:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name test-container -p 8000:8000 image-definitions:test
        
        # Wait for the service to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test API endpoint
        curl -f http://localhost:8000/api/product-groups
        
        # Stop the container
        docker stop test-container

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test-docker]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Add your container registry login here
    # - name: Login to Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: your-registry.com
    #     username: ${{ secrets.REGISTRY_USERNAME }}
    #     password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image (staging)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false  # Change to true when registry is configured
        tags: |
          image-definitions:staging
          image-definitions:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Add your deployment steps here
    # - name: Deploy to staging
    #   run: |
    #     # kubectl apply -f k8s/ --namespace=image-definitions-staging
    #     echo "Deploy to staging environment"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Add your container registry login here
    # - name: Login to Container Registry
    #   uses: docker/login-action@v3
    #   with:
    #     registry: your-registry.com
    #     username: ${{ secrets.REGISTRY_USERNAME }}
    #     password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image (production)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false  # Change to true when registry is configured
        tags: |
          image-definitions:latest
          image-definitions:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Add your deployment steps here
    # - name: Deploy to production
    #   run: |
    #     # kubectl apply -f k8s/ --namespace=image-definitions
    #     echo "Deploy to production environment"
